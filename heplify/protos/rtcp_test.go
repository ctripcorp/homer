package protos

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var testPacket = []byte{
	// Receiver Report (offset=0)
	// v=2, p=0, count=1, RR, len=7
	0x81, 0xc9, 0x0, 0x7,
	// ssrc=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,
	// ssrc=0xbc5e9a40
	0xbc, 0x5e, 0x9a, 0x40,
	// fracLost=0, totalLost=0
	0x0, 0x0, 0x0, 0x0,
	// lastSeq=0x46e1
	0x0, 0x0, 0x46, 0xe1,
	// jitter=273
	0x0, 0x0, 0x1, 0x11,
	// lsr=0x9f36432
	0x9, 0xf3, 0x64, 0x32,
	// delay=150137
	0x0, 0x2, 0x4a, 0x79,

	// Source Description (offset=32)
	// v=2, p=0, count=1, SDES, len=12
	0x81, 0xca, 0x0, 0xc,
	// ssrc=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,
	// CNAME, len=38
	0x1, 0x26,
	// text="{9c00eb92-1afb-9d49-a47d-91f64eee69f5}"
	0x7b, 0x39, 0x63, 0x30,
	0x30, 0x65, 0x62, 0x39,
	0x32, 0x2d, 0x31, 0x61,
	0x66, 0x62, 0x2d, 0x39,
	0x64, 0x34, 0x39, 0x2d,
	0x61, 0x34, 0x37, 0x64,
	0x2d, 0x39, 0x31, 0x66,
	0x36, 0x34, 0x65, 0x65,
	0x65, 0x36, 0x39, 0x66,
	0x35, 0x7d,
	// END + padding
	0x0, 0x0, 0x0, 0x0,

	// Goodbye (offset=84)
	// v=2, p=0, count=1, BYE, len=1
	0x81, 0xcb, 0x0, 0x1,
	// source=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,

	// Picture Loss Indication (offset=92)
	0x81, 0xce, 0x0, 0x2,
	// sender=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,
	// media=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,

	// RapidResynchronizationRequest (offset=104)
	0x85, 0xcd, 0x0, 0x2,
	// sender=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,
	// media=0x902f9e2e
	0x90, 0x2f, 0x9e, 0x2e,
}

func TestUnmarshal(t *testing.T) {
	_, packet, _ := ParseRTCP(testPacket)
	expected := `{"sender_information":{"ntp_timestamp_sec":0,"ntp_timestamp_usec":0,"rtp_timestamp":0,"packets":0,"octets":0},"ssrc":2419039790,"type":206,"report_count":1,"report_blocks":[{"source_ssrc":3160316480,"fraction_lost":0,"packets_lost":0,"highest_seq_no":18145,"ia_jitter":273,"lsr":166945842,"dlsr":150137}],"report_blocks_xr":{"type":0,"id":0,"fraction_lost":0,"fraction_discard":0,"burst_density":0,"gap_density":0,"burst_duration":0,"gap_duration":0,"round_trip_delay":0,"end_system_delay":0},"sdes_ssrc":2419039790}`
	assert.Equal(t, expected, string(packet))
	_, packet, _ = ParseRTCP(benchPacket)
	expected = `{"sender_information":{"ntp_timestamp_sec":151547,"ntp_timestamp_usec":2190433170,"rtp_timestamp":290065474,"packets":749,"octets":117455},"ssrc":1492336106,"type":202,"report_count":1,"report_blocks":[{"source_ssrc":3535621694,"fraction_lost":0,"packets_lost":0,"highest_seq_no":513,"ia_jitter":20,"lsr":2263420829,"dlsr":214237}],"report_blocks_xr":{"type":0,"id":0,"fraction_lost":0,"fraction_discard":0,"burst_density":0,"gap_density":0,"burst_duration":0,"gap_duration":0,"round_trip_delay":0,"end_system_delay":0},"sdes_ssrc":1492336106}`
	assert.Equal(t, expected, string(packet))
}

var benchPacket = []byte{0x81, 0xc8, 0x0, 0xc, 0x58, 0xf3, 0x3d, 0xea, 0x0, 0x2, 0x4f, 0xfb, 0x82, 0x8f, 0x5b, 0x92, 0x11, 0x4a, 0xc, 0x42, 0x0, 0x0, 0x2, 0xed, 0x0, 0x1, 0xca, 0xcf, 0xd2, 0xbd, 0x4e, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x1, 0x0, 0x0, 0x0, 0x14, 0x86, 0xe9, 0xf, 0x9d, 0x0, 0x3, 0x44, 0xdd, 0x81, 0xca, 0x0, 0x8, 0x58, 0xf3, 0x3d, 0xea, 0x1, 0x16, 0x41, 0x43, 0x4c, 0x54, 0x50, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x33, 0x30, 0x0, 0x0, 0x0, 0x0}

func BenchmarkParseRTCP(b *testing.B) {
	for i := 0; i < b.N; i++ {
		ParseRTCP(benchPacket)
	}
}
